# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal screen-256color

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

###############################
# PREFIX
# 

# Screen like binding
unbind C-b
#set -g prefix C-a
#bind a send-prefix

# There are two way to bind TMUX prefix key, but I want to use Way 2 because 
# I want to use Ctrl + a and Ctrl + b hotkey to manipulate command in linux command line
# Way 1: Ctrl + a -> prefix for first tmux session level
#        Ctrl + b -> prefix for second tmux session level
# # remap prefix to Control + a
# set -g prefix C-a
# # bind 'C-a C-a' to type 'C-a'
# bind C-a send-prefix
# 
# # Bind key to second tmux session level
# bind-key -n C-b send-prefix

# Way 2: Ctrl + s -> prefix for first tmux session level
#        Ctrl + s then Ctrl + s for second tmux session level
# remap prefix to Control + s
set -g prefix C-s
# bind 'C-s C-s' to type 'C-s'
bind C-s send-prefix

#
# PREFIX
###############################


###############################
# VI MODE
#

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# Set up for copy mode 
setw -g mode-keys vi
bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy 'y' copy-selection
bind -t vi-copy y copy-pipe "xclip -sel clip -i"


# Smart pane switching with awareness of vim splits.
# Source: https://github.com/christoomey/vim-tmux-navigator
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"

#
# VI MODE
###############################



###############################
# WINDOWS
#

# Screen like binding for last window
#unbind l
#bind C-a last-window

# Back to previous window
unbind l
bind-key -r p last-window

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# Automatically set window title
setw -g automatic-rename

# set first window to index 1 (not 0) to map more to the keyboard layout...
set-option -g base-index 1
set-window-option -g pane-base-index 1

#
# WINDOWS
###############################


###############################
# PANES
#
# - SPLIT
# Split window into 2 pane
#bind-key h split-window -h
#bind-key v split-window -v

# Create splits and vertical splits
#bind-key v split-window -h -p 50 -c "#{pane_current_path}"
#bind-key ^V split-window -h -p 50 -c "#{pane_current_path}"
#bind-key s split-window -p 50 -c "#{pane_current_path}"
#bind-key ^S split-window -p 50 -c "#{pane_current_path}"

bind-key v split-window -h -p 50 -c "#{pane_current_path}"
bind-key | split-window -v -p 50 -c "#{pane_current_path}"

# - SPLIT

# RESIZE
# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# OR
# Resize pane without the prefix
#bind-key Up resize-pane -U
#bind-key Down resize-pane -D
#bind-key Left resize-pane -L
#bind-key Right resize-pane -R

# JOIN
## Join windows: <prefix> s, <prefix> j
#bind-key J command-prompt -p "join pane from:"  "join-pane -s '%%'"
#bind-key S command-prompt -p "send pane to:"  "join-pane -t '%%'"

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

#
# PANES
###############################



###############################
# STATUS

# Option 1
# color scheme (styled as vim-powerline)
set -g status-bg colour234
set -g status-fg white
set -g status-left-length 52
set -g status-right-length 451
set -g status-left '#[fg=colour235,bg=colour252,bold] ❐ #S #[fg=colour252,bg=colour238,nobold]⮀#[fg=colour245,bg=colour238,bold] #(whoami) #[fg=colour238,bg=colour234,nobold]⮀'

# Option 2
# Status bar with cpu load and time
#set -g status-bg black                                             
#set -g status-fg yellow                                            
#set -g status-attr default                                         
#set -g status-left ' '
#set -g status-interval 2
#set -g status-right '#[fg=black,bg=green]#(tmux-mem-cpu-load --interval 2) #[bg=white,fg=black]#(date +" %a %d %B, %H:%M:%S ")'
#set -g status-right-length 90


# set window status bar
set -g window-status-format "#[fg=colour235,bg=colour252,bold] #F #I #W "
set -g window-status-current-format "#[fg=colour234,bg=colour39]⮀#[fg=black,bg=colour39,noreverse,bold] #F #I: #W #[fg=colour39,bg=colour234,nobold]⮀"
# OR
#set -g window-status-format '[#F #I #W]'
#setw -g window-status-fg brightblue                                
#setw -g window-status-bg default                                   
#set -g window-status-current-format '[#F #I #W]'
#setw -g window-status-current-fg yellow                            
#setw -g window-status-current-bg default                           
setw -g window-status-current-attr dim                             

# pane border color
set -g pane-border-fg colour245
set -g pane-active-border-fg colour39
#OR
#set -g pane-border-fg black                                        
#set -g pane-border-bg default                                      
#set -g pane-active-border-fg yellow                                
#set -g pane-active-border-bg default                               

# pane number display color
set -g display-panes-active-colour yellow                          
set -g display-panes-colour brightblue                             

# command line/message text color
set -g message-fg colour16
set -g message-bg colour221
set -g message-attr bold
#OR
#set -g message-bg black                                            
#set -g message-fg yellow                                           

# Patch for OS X pbpaste and pbcopy under tmux.
set-option -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL"

# No escape time for vi mode
set -sg escape-time 0

# Bigger history
set -g history-limit 50000

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Local config
if-shell "[ -f ~/.tmux.conf.user ]" 'source ~/.tmux.conf'

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'

run '~/.tmux/plugins/tpm/tpm'

